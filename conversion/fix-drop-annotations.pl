#!/usr/bin/perl -w

use Formalog::Util::SWIPLI;
use PerlLib::SwissArmyKnife;

my $interlingua =
  [
   'define',
   [
    'domain',
    'hygiene'
   ],
   [
    ':requirements',
    [
     '_prolog_list',
     'negative-preconditions',
     'conditional-effects',
     'equality',
     'typing',
     'fluents',
     'durative-actions',
     'derived-predicates'
    ]
   ],
   [
    ':types',
    [
     '_prolog_list',
     [
      'are',
      [
       '_prolog_list',
       'object',
       'location',
       'outlet',
       'stuff',
       'tool',
       'person',
       '-',
       'object',
       'battery-powered-device',
       '-',
       'object',
       'electric-razor',
       '-',
       'battery-powered-device',
       'collection',
       '-',
       'object',
       'meals',
       '-',
       'collection',
       'office',
       '-',
       'location',
       'building',
       '-',
       'location',
       'store',
       '-',
       'building',
       'headset',
       '-',
       'object',
       'container',
       '-',
       'object',
       'lockable-container',
       '-',
       'container',
       'locker',
       '-',
       'lockable-container',
       'bag',
       '-',
       'container',
       'tool',
       '-',
       'object',
       'hygiene-tool',
       '-',
       'tool',
       'laptop'
      ],
      'battery-powered-device'
     ]
    ]
   ],
   [
    ':predicates',
    [
     '_prolog_list',
     [
      'socially-acceptable',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?P'}
       ],
       'person'
      ]
     ],
     [
      'isolated',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?L'}
       ],
       'location'
      ]
     ],
     [
      'inaccessible',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][2][1][1][1]
       ],
       'location'
      ]
     ],
     [
      'at',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?Ob'}
       ],
       'object'
      ],
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][2][1][1][1]
       ],
       'location'
      ]
     ],
     [
      'autonomous',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][4][1][1][1]
       ],
       'object'
      ]
     ],
     [
      'mobile',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][4][1][1][1]
       ],
       'object'
      ]
     ],
     [
      'holding',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?Ob0'},
	\*{'::?Ob1'}
       ],
       'object'
      ]
     ],
     [
      'is-contained-by',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][7][1][1][2]
       ],
       'object'
      ],
      [
       'are',
       [
	'_prolog_list',
	\*{'::?C'}
       ],
       'container'
      ]
     ],
     [
      'plugged-in',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][2][1][1][1]
       ],
       'laptop'
      ]
     ],
     [
      'all-pending-work-accomplished',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
       ],
       'person'
      ]
     ],
     [
      'shaved',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
       ],
       'person'
      ]
     ],
     [
      'showered',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
       ],
       'person'
      ]
     ],
     [
      'clean',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?La'}
       ],
       'laundry'
      ]
     ],
     [
      'wet',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][13][1][1][1]
       ],
       'laundry'
      ]
     ],
     [
      'tired',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
       ],
       'person'
      ]
     ],
     [
      'hungry',
      [
       'are',
       [
	'_prolog_list',
	$VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
       ],
       'person'
      ]
     ],
     [
      'locked',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?Lo'}
       ],
       'lockable-container'
      ]
     ],
     [
      'use-is-required',
      [
       'are',
       [
	'_prolog_list',
	\*{'::?T'}
       ],
       'tool'
      ]
     ],
     'ship-shape'
    ]
   ],
   [
    ':functions',
    [
     '_prolog_list',
     [
      'f',
      'actions',
      undef
     ],
     [
      'f',
      'quantity',
      [
       '_prolog_list',
       [
	'are',
	[
	 '_prolog_list',
	 $VAR1->{'Interlingua'}[1][4][1][8][2][1][1]
	],
	'collection'
       ]
      ]
     ],
     [
      'f',
      'hourly-wage-net',
      [
       '_prolog_list',
       [
	'are',
	[
	 '_prolog_list',
	 $VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
	],
	'person'
       ]
      ]
     ],
     [
      'f',
      'total-walking-distance',
      undef
     ],
     [
      'f',
      'charge-rate',
      [
       '_prolog_list',
       [
	'are',
	[
	 '_prolog_list',
	 \*{'::?R'}
	],
	'battery-powered-device'
       ]
      ]
     ],
     [
      'f',
      'charge-level',
      [
       '_prolog_list',
       [
	'are',
	[
	 '_prolog_list',
	 $VAR1->{'Interlingua'}[1][5][1][5][2][1][1][1]
	],
	'battery-powered-device'
       ]
      ]
     ],
     [
      'f',
      'speed',
      [
       '_prolog_list',
       [
	'are',
	[
	 '_prolog_list',
	 $VAR1->{'Interlingua'}[1][4][1][4][1][1][1]
	],
	'object'
       ]
      ]
     ],
     [
      'f',
      'cash',
      [
       '_prolog_list',
       [
	'are',
	[
	 '_prolog_list',
	 $VAR1->{'Interlingua'}[1][4][1][1][1][1][1]
	],
	'person'
       ]
      ]
     ]
    ]
   ],
   \*{'::?_G17535'}
  ];

sub SWIPLIDropAnnotationsFixed {
  my (%args) = @_;
  my $item = $args{Interlingua};
  my $ref = ref($item);
  if ($ref eq 'ARRAY') {
    if ($item->[0] eq '_prolog_list') {
      shift @$item;
      my @newlist;
      foreach my $subitem (@$item) {
	push @newlist, SWIPLIDropAnnotationsFixed(Interlingua => $subitem);
      }
      return \@newlist;
    } else {
      my @newlist;
      foreach my $subitem (@$item) {
	push @newlist, SWIPLIDropAnnotationsFixed(Interlingua => $subitem);
      }
      return \@newlist;
    }
  } else {
    return $item;
  }
}

print Dumper(SWIPLIDropAnnotations(Interlingua => $interlingua));
# print Dumper(SWIPLIDropAnnotationsFixed(Interlingua => $interlingua));
